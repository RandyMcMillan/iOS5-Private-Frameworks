/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "BasicAccount.h"

#import "AccountCreationProtocol-Protocol.h"
#import "BasicAccountSyncing-Protocol.h"

@class DASettingsTemplate, DAStatusReport, NSArray, NSData, NSMutableDictionary, NSString, NSURL;

@interface DAAccount : BasicAccount <AccountCreationProtocol, BasicAccountSyncing>
{
    int _dataclasses;
    BOOL _hasDirtyBits;
    BOOL _hasInitted;
    BOOL _shouldAutodiscoverPrincipalURL;
    BOOL _shouldPromptForPassword;
    BOOL _shouldFailAllTasks;
    BOOL _shouldUseOpportunisticSockets;
    int _originalDataclasses;
    struct __CFDictionary *_changeTypesByDataclass;
    NSMutableDictionary *_haveWarnedAboutCertDict;
    DASettingsTemplate *_settingsTemplate;
    DAStatusReport *_statusReport;
    struct __CFDictionary *_consumers;
    struct __CFURLStorageSession *_storageSession;
}

+ (id)newAccountOfAccountType:(id)arg1;
+ (id)defaultProperties;
+ (Class)classForAccountType:(id)arg1;
+ (Class)daemonClass;
+ (Class)clientClass;
+ (Class)accountClassWithProperties:(id)arg1;
+ (Class)accountClass;
+ (id)basicAccountProperties;
@property BOOL shouldUseOpportunisticSockets; // @synthesize shouldUseOpportunisticSockets=_shouldUseOpportunisticSockets;
@property BOOL shouldFailAllTasks; // @synthesize shouldFailAllTasks=_shouldFailAllTasks;
@property(readonly) DAStatusReport *statusReport; // @synthesize statusReport=_statusReport;
@property(retain) DASettingsTemplate *settingsTemplate; // @synthesize settingsTemplate=_settingsTemplate;
@property BOOL shouldAutodiscoverPrincipalURL; // @synthesize shouldAutodiscoverPrincipalURL=_shouldAutodiscoverPrincipalURL;
@property(readonly) int enabledDataclassesBitmask; // @synthesize enabledDataclassesBitmask=_dataclasses;
- (struct __CFURLStorageSession *)copyStorageSession;
- (BOOL)childKeyIsSharedForWriting:(id)arg1;
- (BOOL)childKeyIsSharedForReading:(id)arg1;
- (BOOL)isHotmailAccount;
- (BOOL)isCalDAVChildAccount;
- (BOOL)isCardDAVAccount;
- (BOOL)isCalDAVAccount;
- (BOOL)isLDAPAccount;
- (BOOL)isActiveSyncAccount;
- (BOOL)isEqualToAccount:(id)arg1;
- (void)resetStatusReport;
- (BOOL)resetCertWarnings;
- (void)setHaveWarnedAboutCert:(id)arg1 forHost:(id)arg2;
- (BOOL)haveWarnedAboutCert:(id)arg1 forHost:(id)arg2;
@property(setter=setDAAccountVersion:) int daAccountVersion;
@property(readonly) BOOL isChildAccount;
- (void)saveAccountSettings;
- (void)cleanupAccountFiles;
- (void)setExceptions:(struct __CFData *)arg1 forDigest:(id)arg2;
- (struct __CFData *)exceptionsForDigest:(id)arg1;
- (id)_exceptionsDict;
- (BOOL)_isIdentityManagedByProfile;
- (void)setIdentityCertificatePersistentID:(id)arg1 managedByProfile:(BOOL)arg2;
@property(readonly) NSData *identityPersist;
- (void)saveChildAccountSettingsWithAccountsManager:(id)arg1;
- (void)saveAccountProperties;
- (void)removeClientCertificateData;
- (id)defaultContainerIdentifierForDADataclass:(int)arg1;
- (void)stopMonitoringFolders;
- (void)stopMonitoringFoldersWithIDs:(id)arg1;
- (BOOL)monitorFolderWithID:(id)arg1;
- (BOOL)monitorFoldersWithIDs:(id)arg1;
- (void)tearDown;
- (BOOL)hasDirtyBits;
- (void)_setProperties:(id)arg1;
@property(copy) NSURL *principalURL;
@property(copy) NSString *scheme;
- (id)urlForKeychain;
@property int port;
@property(retain) NSData *encryptionIdentityPersistentReference;
@property(retain) NSData *signingIdentityPersistentReference;
- (BOOL)accountContainsEmailAddress:(id)arg1;
@property(copy) NSArray *emailAddresses;
@property(copy) NSString *emailAddress;
@property BOOL useSSL;
@property(copy) NSString *host;
@property(copy) NSString *user;
@property(copy) NSString *username;
- (void)setVersion:(id)arg1;
- (id)version;
@property(copy) NSString *password;
- (void)setPassword:(id)arg1 withAccessibility:(int)arg2;
- (int)keychainAccessibilityType;
@property BOOL shouldPromptForPassword;
- (BOOL)upgradeAccount;
- (BOOL)_upgradeSelfFromPreKirkwood;
- (BOOL)accountNeedsUpgrade;
- (void)_removeHostsToTrust;
- (void)cancelAutodiscovery;
- (BOOL)autodiscoverAccountConfigurationWithConsumer:(id)arg1;
- (void)checkValidityWithConsumer:(id)arg1;
- (void)removeConsumerForTask:(id)arg1;
- (id)consumerForTask:(id)arg1;
- (void)setConsumer:(id)arg1 forTask:(id)arg2;
- (id)domainOnly;
- (id)usernameWithoutDomain;
- (void)takeValuesFromAccount:(id)arg1;
- (id)stateString;
- (void)stopMonitoringFolderWithID:(id)arg1;
- (void)suspendMonitoringFoldersWithIDs:(id)arg1;
- (void)resumeMonitoringFoldersWithIDs:(id)arg1;
- (void)setAccountIntProperty:(int)arg1 forKey:(id)arg2;
- (int)accountIntPropertyForKey:(id)arg1;
- (void)setAccountBoolProperty:(BOOL)arg1 forKey:(id)arg2;
- (BOOL)accountBoolPropertyForKey:(id)arg1;
- (id)spinnerIdentifiers;
- (int)accountChangeTypeForDataclass:(int)arg1;
- (BOOL)originallyEnabledForDADataclass:(int)arg1;
- (void)setEnabled:(BOOL)arg1 forDADataclass:(int)arg2 changeType:(int)arg3;
- (BOOL)enabledForDADataclass:(int)arg1;
- (BOOL)isDisabled;
- (BOOL)supportsDADataclass:(int)arg1;
@property(copy) NSString *accountDescription;
- (void)_setPersistentUUID:(id)arg1;
@property(readonly) NSString *tag;
@property(readonly) NSString *persistentUUID;
@property(readonly, nonatomic) NSString *scheduleIdentifier;
- (id)syncStoreIdentifier;
- (id)accountID;
- (void)resetAccountID;
- (id)init;
- (id)initWithProperties:(id)arg1;
- (void)dealloc;

@end

