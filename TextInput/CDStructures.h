/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct Bucket<KB::String, KB::FPoint>;

struct Bucket<KB::String, KB::Word>;

struct Bucket<KB::String, unsigned int>;

struct CGPoint {
    float x;
    float y;
};

struct DictionaryCursors;

struct DynamicDictionary {
    struct RefPtr<KB::DynamicDictionaryImpl> m_impl;
    int m_log_level;
};

struct DynamicDictionaryImpl;

struct HashTraits<KB::String>;

struct Hashmap<KB::String, KB::FPoint> {
    unsigned int m_size;
    unsigned int m_capacity;
    unsigned int m_table_size;
    unsigned int m_extra_size;
    unsigned int m_extra_index;
    _Bool m_rehashing;
    struct HashTraits<KB::String> m_traits;
    struct Bucket<KB::String, KB::FPoint> *m_table;
    struct Bucket<KB::String, KB::FPoint> *m_extra;
};

struct Hashmap<KB::String, KB::Word> {
    unsigned int m_size;
    unsigned int m_capacity;
    unsigned int m_table_size;
    unsigned int m_extra_size;
    unsigned int m_extra_index;
    _Bool m_rehashing;
    struct HashTraits<KB::String> m_traits;
    struct Bucket<KB::String, KB::Word> *m_table;
    struct Bucket<KB::String, KB::Word> *m_extra;
};

struct Hashmap<KB::String, unsigned int> {
    unsigned int m_size;
    unsigned int m_capacity;
    unsigned int m_table_size;
    unsigned int m_extra_size;
    unsigned int m_extra_index;
    _Bool m_rehashing;
    struct HashTraits<KB::String> m_traits;
    struct Bucket<KB::String, unsigned int> *m_table;
    struct Bucket<KB::String, unsigned int> *m_extra;
};

struct Input;

struct KeyArea;

struct KeyCharClassifier {
    unsigned short m_classifier_flags;
};

struct LayoutDictionaryContext {
    struct SortedKeyLayout *key_layout;
    struct WordTrie *static_trie;
    struct DynamicDictionary *dynamic_dict;
    struct Vector<ZT::PriorTouchKeyVectors> prior_touch_error_vector_cache;
    struct Vector<KB::DictionaryCursors> cursor_prediction_temp_list;
    struct SortKeyByteConverter *sort_key_converter;
    unsigned int compoundable_meta_flags;
    _Bool allow_space_corrections;
    _Bool uses_candidate_selection;
    struct WordinessStore *wordiness;
};

struct PackedTrieSibling {
    union {
        unsigned int whole;
        struct {
            unsigned int child_offset:24;
            unsigned int patricia_key_size_1:2;
            unsigned int has_child_offset_type:2;
            unsigned int has_word_termination_prob:1;
            unsigned int has_unigram_list_offset:1;
            unsigned int has_freq:1;
            unsigned int more_siblings:1;
        } v2fields;
        struct {
            unsigned int child_offset_byte0:8;
            unsigned int child_offset_byte1:8;
            unsigned int child_offset_byte2:8;
            unsigned int flags_byte:8;
        } v2bytes;
    } sortNchild;
    union {
        unsigned int whole;
        struct {
            unsigned int word_offset:23;
            unsigned int word_is_0freq:1;
            unsigned int compacted_freq:8;
        } fields;
        struct {
            unsigned int word_offset_or_prob_byte0:8;
            unsigned int word_offset_byte1:8;
            unsigned int word_offset_byte2:8;
            unsigned int freq_byte:8;
        } v2bytes;
    } freqNword;
    unsigned char patricia_key_bytes[4];
};

struct PriorTouchKeyVectors;

struct ReadOnlyDataFile;

struct RefPtr<KB::DynamicDictionaryImpl> {
    struct DynamicDictionaryImpl *m_ptr;
};

struct RefPtr<KB::WordTrieNode> {
    struct WordTrieNode *m_ptr;
};

struct SortKeyByteConverter {
    void **_vptr$SortKeyByteConverter;
    unsigned int m_single_primaries_to_letter[256];
    _Bool m_is_known_lead_primary[256];
    struct Hashmap<KB::String, unsigned int> m_sort_keys_to_letter_forms;
};

struct SortedKeyLayout {
    unsigned int m_size;
    unsigned int m_capacity;
    struct KeyArea *m_elements;
    struct KeyArea *m_neighborKeys[13];
    int m_numNeighborKeys;
    int m_neighborIteratorIndex;
    float m_neighborSearchRadiusSQE;
    struct CGPoint m_coordinateForNeighborSort;
    struct KeyCharClassifier m_unionOfKeysClassifier;
    float m_leftmostXcentroid;
    float m_rightmostXcentroid;
    float m_smallestKeyRadius;
    float g_touchKeyErrorNormalizer;
    float g_interTouchErrorNormalizer;
    float k_maxKeyRadiusBeforeDeadzone;
    float k_searchRadius_TypingSlow;
    float k_searchRadius_TypingFast;
    float k_errorStdev_KeyCenterToFinger;
    float k_errorStdev_KeyCenterToThumb;
    float k_errorStdev_InterFinger;
    float k_errorStdev_InterThumb;
    float k_errorStdev_InterNonAlphabetic;
};

struct StaticDictionaryAlphabet {
    void **_vptr$StaticDictionary;
    struct WordTrie m_trie;
    int m_log_level;
};

struct String {
    unsigned short m_size;
    unsigned short m_capacity;
    unsigned short m_length;
    unsigned short m_sort_key_length;
    unsigned char m_buffer_type;
    char *m_buffer;
    char m_static_buffer[16];
};

struct StrokeBuildManager;

struct TIInputManagerAlphabet {
    void **_field1;
    struct StaticDictionaryAlphabet _field2;
    struct Vector<KB::Input> _field3;
    struct String _field4;
    struct String _field5;
    struct Vector<KB::String> _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct Hashmap<KB::String, KB::Word> _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    int _field16;
    struct __CFString *_field17;
    struct __CFLocale *_field18;
    struct DynamicDictionary _field19;
    _Bool _field20;
    struct __CFDictionary *_field21;
    struct __CFArray *_field22;
};

struct TIInputManagerZephyr {
    void **_field1;
    struct StaticDictionaryAlphabet _field2;
    struct Vector<KB::Input> _field3;
    struct String _field4;
    struct String _field5;
    struct Vector<KB::String> _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct Hashmap<KB::String, KB::Word> _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    int _field16;
    struct __CFString *_field17;
    struct __CFLocale *_field18;
    struct String _field19;
    struct String _field20;
    struct DynamicDictionary _field21;
    struct WordinessStore _field22;
    struct StrokeBuildManager *_field23;
    struct SortedKeyLayout _field24;
    struct TIKeyLayout *_field25;
    struct String _field26;
    _Bool _field27;
    struct LayoutDictionaryContext _field28;
    struct Hashmap<KB::String, KB::FPoint> _field29;
    int _field30;
    _Bool _field31;
    struct String _field32;
    struct Vector<KB::String> _field33;
    id _field34;
};

struct TIKeyLayout;

struct TrieArrayCache<KB::PackedTrieSibling, const char*> {
    char *m_loaded_for_parent;
    int m_num_tags;
    unsigned char m_tag_list[256];
    struct PackedTrieSibling m_values[256];
    unsigned int m_compilation_flags;
    char *m_base_addr;
};

struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>, const char*> {
    struct TrieArrayCache<KB::PackedTrieSibling, const char*> root;
    struct TrieArrayCache<KB::PackedTrieSibling, const char*> deep;
};

struct Vector<KB::DictionaryCursors> {
    unsigned int m_size;
    unsigned int m_capacity;
    struct DictionaryCursors *m_elements;
};

struct Vector<KB::Input> {
    unsigned int m_size;
    unsigned int m_capacity;
    struct Input *m_elements;
};

struct Vector<KB::String> {
    unsigned int m_size;
    unsigned int m_capacity;
    struct String *m_elements;
};

struct Vector<WTF::RefPtr<KB::WordTrieNode>, 0ul> {
    unsigned int m_size;
    struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>, 0ul> m_buffer;
};

struct Vector<ZT::PriorTouchKeyVectors> {
    unsigned int m_size;
    unsigned int m_capacity;
    struct PriorTouchKeyVectors *m_elements;
};

struct VectorBuffer<WTF::RefPtr<KB::WordTrieNode>, 0ul> {
    struct RefPtr<KB::WordTrieNode> *m_buffer;
    unsigned int m_capacity;
};

struct WordTrie {
    struct ReadOnlyDataFile *m_index;
    struct ReadOnlyDataFile *m_words;
    unsigned int m_word_count;
    struct RefPtr<KB::WordTrieNode> m_root;
    struct WordTrieSearch m_search;
    struct WordTrieSearch m_saved_search;
    _Bool m_returns_words_shorter_than_search;
    _Bool m_valid;
    struct TrieArrayCacheSet<KB::TrieArrayCache<KB::PackedTrieSibling, const char*>, const char*> m_trie_array_cache_set;
    unsigned int m_compilation_flags;
    unsigned int m_unigram_payload_offset;
    unsigned int m_trie_root_offset;
    float m_root_usage_sum;
    struct SortKeyByteConverter m_sort_key_converter;
};

struct WordTrieNode;

struct WordTrieSearch {
    struct Vector<WTF::RefPtr<KB::WordTrieNode>, 0ul> m_states;
    int m_type;
    struct String m_string;
    struct String m_sort_key;
};

struct WordinessStore {
    struct ReadOnlyDataFile *m_trigrams;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct __CFLocale;

struct __CFString;

