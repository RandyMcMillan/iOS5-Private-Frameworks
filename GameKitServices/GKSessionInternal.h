/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class GKAutoPeerIDTable, GKConnection, GKList, GKSession, GKTable, GKVoiceChatSessionListener, NSString;

@interface GKSessionInternal : NSObject
{
    GKSession *_session;
    NSString *domain;
    NSString *serviceType;
    unsigned int _port;
    NSString *_displayName;
    unsigned int _pid;
    unsigned int maxPeers;
    struct OpaqueGCKSession *sessionRef;
    struct OpaqueAGPSession *agpSessionRef;
    GKConnection *_connection;
    id <GKSessionDelegate> _delegate;
    id <GKSessionPrivateDelegate> _privateDelegate;
    id <GKSessionDataReceiveHandler> _dataReceiveHandler;
    void *_dataReceiveHandlerContext;
    id <GKSessionDOOBReceiveHandler> _doobReceiveHandler[2];
    void *_doobReceiveHandlerContext[2];
    GKTable *_peerInfoTable;
    GKTable *_peerNameTable;
    GKAutoPeerIDTable *_peerIDTable;
    GKList *_peersAvailable;
    GKList *_peersConnected;
    GKList *_peersForCleanup;
    GKList *_peersPendingIncomingInvitation;
    GKList *_peersPendingOutgoingInvitation;
    struct _opaque_pthread_mutex_t _lock;
    struct _opaque_pthread_mutex_t _delegateLock;
    BOOL _isSearching;
    BOOL _isPublishing;
    BOOL _sessionStarted;
    int _mode;
    BOOL _isBusy;
    NSString *sessionID;
    NSString *displayName;
    double disconnectTimeout;
    struct _DNSServiceRef_t *_dnsServiceConnection;
    struct _DNSServiceRef_t *_dnsServiceResolveConnection;
    int _sReset;
    struct _DNSServiceRef_t *_serviceBrowser;
    struct _DNSServiceRef_t *_service;
    struct _DNSServiceRef_t *_oldService;
    BOOL _handleEventsRunning;
    BOOL _stopHandlingEvents;
    BOOL _wifiEnabled;
    BOOL _shutdown;
    GKVoiceChatSessionListener *_voiceChatListener;
}

@property id <GKSessionDelegate> delegate; // @synthesize delegate=_delegate;
@property id <GKSessionPrivateDelegate> privateDelegate; // @synthesize privateDelegate=_privateDelegate;
- (id)description;
- (id)initWithConnection:(id)arg1 session:(id)arg2 delegate:(id)arg3;
- (id)initWithSessionID:(id)arg1 displayName:(id)arg2 session:(id)arg3 sessionMode:(int)arg4;
- (void)reset;
- (void)dealloc;
@property(readonly) NSString *displayName;
- (id)displayNameForPeer:(id)arg1;
- (BOOL)sendAudioData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (BOOL)passesSendDataSanityCheck:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (BOOL)sendData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 error:(id *)arg4;
- (BOOL)sendData:(id)arg1 toPeers:(id)arg2 withDataMode:(int)arg3 isAudio:(BOOL)arg4 error:(id *)arg5;
- (BOOL)sendDataToAllPeers:(id)arg1 withDataMode:(int)arg2 error:(id *)arg3;
- (void)receiveDOOB:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void *)arg4;
- (void)setDOOBReceiveHandler:(id)arg1 withContext:(void *)arg2 inBand:(unsigned int)arg3;
- (void)setDataReceiveHandler:(id)arg1 withContext:(void *)arg2;
- (void)timeoutConnectToPeer:(id)arg1;
- (void)connectToPeer:(id)arg1 withTimeout:(double)arg2;
- (void)cancelConnectToPeer:(id)arg1;
- (BOOL)acceptConnectionFromPeer:(id)arg1 error:(id *)arg2;
- (void)denyConnectionFromPeer:(id)arg1;
- (void)disconnectPeerFromAllPeers:(id)arg1;
- (void)disconnectFromAllPeers;
@property(getter=isAvailable) BOOL available;
- (id)peersWithConnectionState:(int)arg1;
@property(readonly) NSString *peerID;
@property(getter=isBusy) BOOL busy;
- (void)stopOldService;
@property BOOL wifiEnabled;
- (BOOL)isPeerBusy:(id)arg1;
@property double disconnectTimeout;
- (void)handleEvents;
- (BOOL)checkDNSConnection;
- (void)publish;
- (BOOL)filterService:(const char *)arg1 withPID:(unsigned int)arg2;
- (void)cleanupExAvailablePeers;
- (void)processTXTRecordForPeer:(id)arg1 txtLen:(unsigned short)arg2 txtRecord:(const void *)arg3;
- (void)didUpdateTXTRecordForPeer:(id)arg1 fromIF:(const char *)arg2 txtLen:(unsigned short)arg3 txtRecord:(const void *)arg4 withError:(int)arg5 moreComing:(BOOL)arg6;
- (void)didFindService:(const char *)arg1 fromIF:(const char *)arg2 withError:(int)arg3 moreComing:(BOOL)arg4;
- (void)didRemoveService:(const char *)arg1 fromIF:(const char *)arg2 withError:(int)arg3 moreComing:(BOOL)arg4;
- (void)browse;
- (BOOL)tryConnectToPeer:(id)arg1;
- (void)didLookupHostname:(struct _DNSServiceRef_t *)arg1 forPeer:(id)arg2 hostName:(const char *)arg3 address:(const struct sockaddr_in *)arg4 interface:(unsigned int)arg5 withError:(int)arg6 moreComing:(BOOL)arg7;
- (void)didResolveService:(struct _DNSServiceRef_t *)arg1 forPeer:(id)arg2 hostName:(const char *)arg3 port:(unsigned short)arg4 interface:(unsigned int)arg5 txtLen:(unsigned short)arg6 txtRecord:(const void *)arg7 withError:(int)arg8 moreComing:(BOOL)arg9;
- (id)stringForGCKID:(unsigned int)arg1;
- (id)voiceChatSessionListener;
@property(readonly, retain) GKConnection *connection; // @synthesize connection=_connection;
@property(readonly) int sessionMode; // @synthesize sessionMode=_mode;
@property(readonly) NSString *sessionID; // @synthesize sessionID;
@property(nonatomic) id dataReceiveHandler; // @synthesize dataReceiveHandler=_dataReceiveHandler;
@property(nonatomic) unsigned int port; // @synthesize port=_port;
@property(nonatomic) struct OpaqueAGPSession *agpSessionRef; // @synthesize agpSessionRef;
@property(nonatomic) struct OpaqueGCKSession *sessionRef; // @synthesize sessionRef;
@property(nonatomic) unsigned int maxPeers; // @synthesize maxPeers;
@property(copy, nonatomic) NSString *serviceType; // @synthesize serviceType;
@property(copy, nonatomic) NSString *domain; // @synthesize domain;

@end

